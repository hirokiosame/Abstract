{"version":3,"sources":["../src/constructorMethods.js"],"names":[],"mappings":"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","file":"constructorMethods.js","sourcesContent":["import {EE, buildWhere, structureModel} from './utils';\nimport signature from 'signature.js';\nimport * as sql from './sqlBuilder';\n\n\n// States\nconst SQL_QUERYING = Symbol('Querying');\nconst SQL_COMPLETED = Symbol('Completed');\n\n\n\nexport default class ModelConstructorMethods {\n\n\tconstructor(){\n\n\t}\n\n\n\t\n\tstatic createTable (cb) {\n\n\t\tconst model = this;\n\n\t\t/* Validation */\n\t\tconsole.assert(typeof this.tableName === 'string', this.name + '.tableName: Must be a string');\n\t\tconsole.assert(this.tableName.length > 0, 'tableName: Cannot be an empty string');\n\n\t\tconsole.assert(typeof this.attributes === 'object', this.name + '.attributes: Must be an object');\n\t\tconsole.assert(Object.keys(this.attributes).length > 0, this.name + '.attributes: Must have at least one attribute');\n\n\n\t\tif (model.tableCreated === SQL_QUERYING) {\n\t\t\ttypeof cb === 'function' && EE(model).once('tableCreated', cb);\n\t\t\treturn;\n\t\t}\n\n\t\tif (model.tableCreated === SQL_COMPLETED) {\n\t\t\ttypeof cb === 'function' && cb(null, false);\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.tableCreated = SQL_QUERYING;\n\n\t\tthis._connection.query(sql.createTable(model), (err) => {\n\n\t\t\tmodel.tableCreated = SQL_COMPLETED;\n\n\t\t\tif (typeof cb === 'function') { cb(err, true); }\n\n\t\t\tEE(model).emit('tableCreated', err, true);\n\t\t});\n\n\t\treturn this;\n\t}\n\n\n\n\n\n\tstatic find(){\n\n\t\tlet { where, replacements, cb } = signature(\n\t\t\t[['function', 'cb']],\n\t\t\t[[Array, 'where']],\n\t\t\t[[Array, 'where'], ['function', 'cb']],\n\t\t\t[[Array, 'where'], [Array, 'replacements'], ['function', 'cb']]\n\t\t)(arguments);\n\n\t\tconsole.log(where);\n\t\tconsole.log(replacements);\n\n\n\n\t\tconst model = this;\n\n\t\tlet innerJoins = [];\n\n\t\tlet _where = [];\n\n\t\tif (where ) {\n\t\t\tfor (let clause of where) {\n\n\t\t\t\tif (typeof clause === 'string') {\n\t\t\t\t\t_where.push(model.tableName + '.' + clause);\n\t\t\t\t}\n\n\t\t\t\tif (clause instanceof Object) {\n\n\t\t\t\t\tlet fModel = clause.model,\n\t\t\t\t\t\tfKey = model::findFK(fModel);\n\n\n\t\t\t\t\tinnerJoins.push(`\n\t\t\t\t\t\tINNER JOIN ${fModel.tableName} ON\n\t\t\t\t\t\t${fModel.tableName}.${fModel.primaryKey} = ${model.tableName}.${fKey}\n\t\t\t\t\t`, ...clause.innerJoins);\n\n\t\t\t\t\t_where.push(...clause.where);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!cb) {\n\t\t\treturn {\n\t\t\t\tmodel,\n\t\t\t\twhere: _where,\n\t\t\t\tinnerJoins\n\t\t\t};\n\t\t}\n\n\n\n\n\t\tlet query = `SELECT * FROM \\`${model.tableName}\\` `;\n\n\n\t\tif (innerJoins.length > 0) {\n\t\t\tquery += innerJoins.join(' ');\n\t\t}\n\t\tif (_where.length > 0) {\n\t\t\tquery += 'WHERE ' + buildWhere(_where, (a)=> a );\n\t\t}\n\n\t\tconsole.log(query, replacements);\n\t\tthis._connection.query({\n\t\t\tsql: query,\n\t\t\tnestTables: true\n\t\t}, replacements, (err, rows, fields) => {\n\n\t\t\tif (err) { return cb(err); }\n\n\t\t\tconsole.log('Raw find result', err, rows);\n\n\t\t\tcb(null, rows.map( row => new model(structureModel(model, row)) ));\n\t\t});\n\t}\n\n}"]}