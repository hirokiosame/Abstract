{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;qBAAkB,OAAO;;;;+BACG,mBAAmB;;;;IAG1B,QAAQ;WAAR,QAAQ;;AAEjB,UAFS,QAAQ,CAEhB,UAAU,EAAC;wBAFH,QAAQ;;AAG3B,6BAHmB,QAAQ,6CAGnB;;AAER,MAAI,EAAE,UAAU,YAAY,MAAM,CAAA,AAAC,EAAE;AAAE,UAAO;GAAE;;AAEhD,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW;MAC5B,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC;;;AAG5B,OAAK,IAAI,GAAG,IAAI,MAAM,EAAE;;;AAGvB,OAAI,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AAAE,aAAS;IAAE;;AAElD,OAAI,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;;AAG5B,OAAI,SAAS,YAAY,QAAQ,EAAE;;;AAGlC,QAAI,EACH,UAAU,CAAC,GAAG,CAAC,YAAY,MAAM,IACjC,UAAU,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA,AACpD,EAAC;AAAE,cAAS;KAAE;;;AAGf,QAAI,EAAE,UAAU,CAAC,GAAG,CAAC,YAAY,SAAS,CAAA,AAAC,EAAE;AAC5C,eAAU,CAAC,GAAG,CAAC,GAAG,IAAI,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;KACjD;IACD;;;AAGD,AAAM,eAAY,MAAlB,IAAI,EAAe,GAAG,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;GACzC;;AAED,SAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;EAClC;;cAtCmB,QAAQ;;SAyCd,iBAAC,MAAM,EAAC;;AAErB,OAAI,CAAC,WAAW,GAAG,mBAAM,gBAAgB,CAAC,MAAM,CAAC,CAAC;AAClD,OAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;GAC3B;;;QA7CmB,QAAQ;;;qBAAR,QAAQ;AA8C5B,CAAC;;AAGF,SAAS,YAAY,CAAE,QAAQ,EAAE,KAAK,EAAE;;AAEvC,KAAI,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;;AAElC,KAAI,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC;;AAEzB,OAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;AACrC,KAAG,EAAE,eAAW;AACf,UAAO,IAAI,CAAC,UAAU,CAAC,CAAC;GACxB;AACD,KAAG,EAAE,aAAU,GAAG,EAAG;AACpB,OAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,UAAO,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;GAC9B;EACD,CAAC,CAAC;CACH","file":"index.js","sourcesContent":["import mysql from 'mysql';\nimport InstanceMethods from './instanceMethods';\n\n\nexport default class Abstract extends InstanceMethods {\n\n\tconstructor(properties){\n\t\tsuper();\n\n\t\tif (!(properties instanceof Object)) { return; }\n\n\t\tconst\tmodel = this.constructor,\n\t\t\t\tschema = model.attributes;\n\n\t\t// Iterate schema attributes\n\t\tfor (let att in schema) {\n\n\t\t\t// Validation of attribute\n\t\t\tif (!properties.hasOwnProperty(att)) { continue; }\n\n\t\t\tlet attribute = schema[att];\n\n\t\t\t// If foreign reference\n\t\t\tif (attribute instanceof Function) {\n\n\t\t\t\t// Validate reference\n\t\t\t\tif (!(\n\t\t\t\t\tproperties[att] instanceof Object &&\n\t\t\t\t\tproperties[att].hasOwnProperty(attribute.primaryKey)\n\t\t\t\t)){ continue; }\n\n\t\t\t\t// Create the instance\n\t\t\t\tif( !(properties[att] instanceof attribute) ){\n\t\t\t\t\tproperties[att] = new attribute(properties[att]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add\n\t\t\tthis::setAttribute(att, properties[att]);\n\t\t}\n\n\t\tconsole.log(JSON.stringify(this));\n\t}\n\n\n\tstatic connect(config){\n\n\t\tthis._connection = mysql.createConnection(config);\n\t\tthis._connection.connect();\n\t}\n};\n\n\nfunction setAttribute (attrName, value) {\n\n\tlet attrSymbol = Symbol(attrName);\n\n\tthis[attrSymbol] = value;\n\n\tObject.defineProperty(this, attrName, {\n\t\tget: function() {\n\t\t\treturn this[attrSymbol];\n\t\t},\n\t\tset: function( val ) {\n\t\t\tthis.unsyncd = true;\n\t\t\treturn this[attrSymbol] = val;\n\t\t}\n\t});\n}\n\n"]}