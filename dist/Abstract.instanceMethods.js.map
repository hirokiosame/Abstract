{"version":3,"sources":["../src/Abstract.instanceMethods.js"],"names":[],"mappings":"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","file":"Abstract.instanceMethods.js","sourcesContent":["import asynk from 'asynk';\nimport * as sql from './sqlBuilder';\nimport ConstructorMethods from './Abstract.constructorMethods';\n\nexport default class InstanceMethods extends ConstructorMethods {\n\n\tconstructor(){\n\t\tsuper();\n\t}\n\n\ttoJSON () {\n\t\tconst\tmodel = this.constructor,\n\t\t\t\tattributes = model.attributes;\n\n\t\tlet obj = {};\n\n\t\tfor (let att in attributes) {\n\t\t\tobj[att] = this[att];\n\t\t}\n\n\t\treturn obj;\n\t}\n\n\tfindByAttributes (keys, cb) {\n\n\t\tconst\tmodel = this.constructor,\n\t\t\t\tattributes = model.attributes;\n\n\n\t\tlet where = [],\n\t\t\tvalues = [];\n\n\t\tfor (let att of keys) {\n\n\t\t\tconsole.assert(att in attributes, `Attribute '${att}' not defined in schema`);\n\n\t\t\tlet value = this[att];\n\n\t\t\twhere.push(`\\`${att}\\` = ?`);\n\n\n\t\t\t// If foreign reference\n\t\t\tif( typeof attributes[att] === 'function' ){\n\t\t\t\tlet _model = attributes[att];\n\t\t\t\tvalues.push(value[_model.primaryKey]);\n\t\t\t}else{\n\t\t\t\tvalues.push(value);\n\t\t\t}\n\t\t}\n\n\t\tmodel.find(where, values, cb);\n\t}\n\n\n\tfindSelf (cb) {\n\n\t\tconst model = this.constructor;\n\n\t\tlet attributes;\n\n\t\t// Find by primary key\n\t\tif (this[model.primaryKey]) {\n\t\t\tattributes = [model.primaryKey];\n\t\t}\n\n\t\t// Find by unique keys\n\t\telse if (\n\t\t\tmodel.uniqueKeys instanceof Array &&\n\t\t\tmodel.uniqueKeys.length > 0 &&\n\t\t\tmodel.uniqueKeys.every((att) => this[att] !== undefined )\n\t\t) {\n\t\t\tattributes = model.uniqueKeys;\n\t\t}\n\n\t\tif (!attributes) {\n\t\t\tcb(false);\n\t\t}\n\n\n\t\t// IMPLEMENT\n\t\t// Fetch Data\n\t\tthis.findByAttributes(attributes, (err, models) => {\n\n\t\t\tconsole.assert(!err, 'There was an error ' + err);\n\n\n\t\t\tif (models.length === 0) {\n\t\t\t\treturn cb(false);\n\t\t\t}\n\n\t\t\tconsole.assert(models.length === 1, 'More than one models matched. Please revise your schema');\n\n\t\t\tfor (let att in models[0]) {\n\n\t\t\t\t// If attribues don't exist\n\t\t\t\tif (this[att] === undefined) {\n\t\t\t\t\tthis[att] = models[0][att];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcb(this);\n\t\t});\n\t}\n\n\t// Insert or update\n\n\t// In order to save a model, it must be ensured that it can be retrieved again in the future\n\t// We will enforce a composite key in the form of either a primary key or unique keys\n\tsave (cb) {\n\n\t\treturn this::asynk(function* (resume) {\n\n\t\t\tconst model = this.constructor;\n\n\t\t\t/* Validation */\n\t\t\tfor (let att in model.attributes) {\n\n\t\t\t\t/* Validation - Required */\n\t\t\t\tif (model.attributes[att].required) {\n\t\t\t\t\tconsole.assert([undefined, null].indexOf(this[att]) === -1, 'Missing required field \"' + att + '\" in ' + JSON.stringify(this));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet err, result;\n\n\t\t\tlet [found] = yield this.findSelf(resume);\n\n\t\t\tif (found) { return this.update(cb); }\n\t\t\n\n\t\t\t// Save instance\n\t\t\tlet query = this::sql.insertModel(model, this);\n\n\t\t\t[err, result] = yield model._connection.query(...query, resume);\n\n\t\t\tif (result.insertId > 0) {\n\t\t\t\tthis[model.primaryKey] = result.insertId;\n\t\t\t}\n\n\n\t\t\tif (err) {\n\n\t\t\t\tif (err.code === 'ER_DUP_ENTRY') {\n\t\t\t\t\treturn this.findSelf( () => this.update(cb) );\n\t\t\t\t}\n\n\t\t\t\tif (typeof cb === 'function') { cb(err); }\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconsole.assert(result.affectedRows === 1, 'Failed to insert new row');\n\n\t\t\t// Assign primary key - not reliable, always numeric\n\t\t\t// if (model.primaryKey && result instanceof Object && result.insertId !== null) {\n\t\t\t// \tthis[model.primaryKey] = result.insertId;\n\t\t\t// }\n\n\t\t\tif (typeof cb === 'function') { cb(null, this); }\n\t\t});\n\t}\n\n\n\tupdate (cb) {\n\n\t\treturn this::asynk(function* (resume) {\n\n\t\t\tconst model = this.constructor;\n\n\t\t\t// EDIT LATER\n\t\t\tif (!this[model.primaryKey]) { throw new Error('Please add a primary key in ' + JSON.stringify(this)); }\n\n\n\t\t\tlet [query, values] = this::sql.updateModel(model);\n\n\t\t\tlet [err, rows, fields] = yield model._connection.query(query, values, resume);\n\n\t\t\tif (err) { return cb(err); }\n\n\t\t\tif (rows.affectedRows !== 1) {\n\t\t\t\tthrow new Error(`${rows.affectedRows} rows affected! ${query}`);\n\t\t\t}\n\n\t\t\tif (typeof cb === 'function') { cb(null, this); }\n\t\t});\n\t}\n}"]}