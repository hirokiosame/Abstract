{"version":3,"sources":["../src/instanceMethods.js"],"names":[],"mappings":"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","file":"instanceMethods.js","sourcesContent":["import asynk from 'asynk';\nimport * as sql from './sqlBuilder';\nimport ConstructorMethods from './constructorMethods';\n\nexport default class InstanceMethods extends ConstructorMethods {\n\n\tconstructor(){\n\t\tsuper();\n\t}\n\n\ttoJSON () {\n\t\tconst\tmodel = this.constructor,\n\t\t\t\tattributes = model.attributes;\n\n\t\tlet obj = {};\n\n\t\tfor (let att in attributes) {\n\t\t\tobj[att] = this[att];\n\t\t}\n\n\t\treturn obj;\n\t}\n\n\n\tbelongsTo (...objs) {\n\n\t\t// console.log('belongsTo');\n\n\t\tconst model = this.constructor;\n\n\t\tfor (let obj of objs) {\n\n\t\t\tif (!(obj instanceof Model)) { continue; }\n\n\t\t\tlet instanceParent = obj.constructor;\n\n\t\t\t// Verify has primary key\n\t\t\tif (!obj.hasOwnProperty(instanceParent.primaryKey)) {\n\t\t\t\tthrow new Error('Cannot establish relation without a primary key');\n\t\t\t}\n\n\t\t\t// Verify that the relation exists in schema\n\t\t\tlet exists = false;\n\t\t\tfor (let att in model.attributes) {\n\t\t\t\tif (model.attributes[att] === instanceParent) {\n\t\t\t\t\texists = att; break;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (exists === false) { throw new Error('The relationship does not exist'); }\n\n\n\t\t\t// let opts = {};\n\t\t\t// opts[instanceParent.primaryKey] = obj[instanceParent.primaryKey];\n\n\t\t\tthis[exists] = obj;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\n\tfindByAttributes (keys, cb) {\n\n\t\tconst\tmodel = this.constructor,\n\t\t\t\tattributes = model.attributes;\n\n\n\t\tlet where = [],\n\t\t\tvalues = [];\n\n\t\tfor (let att of keys) {\n\n\t\t\tconsole.assert(att in attributes, `Attribute '${att}' not defined in schema`);\n\n\t\t\tlet value = this[att];\n\n\t\t\twhere.push(`\\`${att}\\` = ?`);\n\n\t\t\t// if( value instanceof Object ){\n\t\t\t// \tlet _model = value.constructor;\n\t\t\t// \tvalues.push(value[_model.primaryKey]);\n\t\t\t// }else{\n\t\t\t\tvalues.push(value);\n\t\t\t// }\n\t\t}\n\n\t\tmodel.find(where, values, cb);\n\t}\n\n\n\tfindSelf (cb) {\n\n\t\tconst model = this.constructor;\n\n\t\t// Find by primary key\n\t\tif (this[model.primaryKey]) {\n\n\t\t\t// IMPLEMENT\n\t\t\t// Fetch Data\n\t\t\tthis.findByAttributes([model.primaryKey], (err, models) => {\n\n\t\t\t\tconsole.assert(!err, 'There was an error ' + err);\n\n\t\t\t\tconsole.log('found', models);\n\t\t\t\tif (models instanceof Array && models.length > 0) {\n\n\t\t\t\t\tfor (let att in models[0]) {\n\n\t\t\t\t\t\t// If attribues don't exist\n\t\t\t\t\t\tif( !this.hasOwnProperty(att) ){\n\t\t\t\t\t\t\tthis[att] = models[0][att];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcb(this);\n\n\n\t\t\t\t\t// Only extend key properties\n\t\t\t\t\t// cb( this::extendProperties(model, models[0]) );\n\t\t\t\t}else{\n\t\t\t\t\tcb(false);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// Find by unique keys\n\t\tif (\n\t\t\tmodel.uniqueKeys instanceof Array &&\n\t\t\tmodel.uniqueKeys.every((att) => this[att] !== undefined )\n\t\t) {\n\n\t\t\t// Fetch Data\n\t\t\tthis.findByAttributes(model.uniqueKeys, (err, models) => {\n\n\t\t\t\tif (models instanceof Array && models.length > 0) {\n\n\t\t\t\t\tfor (let att in models[0]) {\n\n\t\t\t\t\t\t// If attribues don't exist\n\t\t\t\t\t\tif (!this.hasOwnProperty(att)) {\n\t\t\t\t\t\t\tthis[att] = models[0][att];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcb(this);\n\n\n\t\t\t\t\t// Only extend key properties\n\t\t\t\t\t// cb( this::extendProperties(model, models[0]) );\n\t\t\t\t}else{\n\t\t\t\t\tcb(false);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tcb(false);\n\t}\n\n\t// Insert or update\n\tsave (cb) {\n\t\treturn this::asynk(function* (resume) {\n\n\t\t\tconst model = this.constructor;\n\n\t\t\tconsole.log('Save', this);\n\n\t\t\t// Validation\n\t\t\tfor( let att in model.attributes ){\n\t\t\t\tif (model.attributes[att].required) {\n\t\t\t\t\tconsole.assert(!this[att], 'Missing required field ' + att + ' in ' + JSON.stringify(this));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet err, result;\n\n\n\t\t\tlet tableCreated;\n\t\t\t[err, tableCreated] = yield model.createTable(resume);\n\t\t\tconsole.assert(err === null, err);\n\n\n\t\t\t// If table already existed, find self\n\t\t\tif (!tableCreated) {\n\n\t\t\t\tlet [found] = yield this.findSelf(resume);\n\n\t\t\t\tconsole.log('found?', found);\n\n\t\t\t\tif (found) { return this.update(cb); }\n\t\t\t}\n\n\n\t\t\t// Save instance\n\t\t\tlet query = sql.insertModel(model, this);\n\t\t\tconsole.log(query);\n\t\t\t[err, result] = yield model._connection.query(...query, resume);\n\t\t\tconsole.log(err, result);\n\n\t\t\tif (err) {\n\n\t\t\t\tif (err.code === 'ER_DUP_ENTRY') {\n\t\t\t\t\treturn this.findSelf( () => this.update(cb) );\n\t\t\t\t}\n\n\t\t\t\ttypeof cb === 'function' && cb(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconsole.assert(result.affectedRows === 1, 'Failed to insert new row');\n\n\t\t\t// Assign primary key - not reliable, always numeric\n\t\t\t// if (model.primaryKey && result instanceof Object && result.insertId !== null) {\n\t\t\t// \tthis[model.primaryKey] = result.insertId;\n\t\t\t// }\n\n\t\t\ttypeof cb === 'function' && cb(null, this);\n\t\t});\n\t}\n\n\n\tupdate (cb) {\n\n\n\t\tconsole.log('update!')\n\n\t\tconst model = this.constructor;\n\n\t\t// EDIT LATER\n\t\tif (!this[model.primaryKey]) { throw new Error('Please add a primary key in ' + JSON.stringify(this)); }\n\n\n\t\tlet set = [],\n\t\t\tvalues = [];\n\n\t\tfor (let att in this) {\n\t\t\t// if( att === model.primaryKey ){ continue; }\n\n\t\t\tlet value = this[att];\n\n\t\t\tset.push(`\\`${att}\\` = ?`);\n\n\t\t\tif (value instanceof Object) {\n\t\t\t\tlet _model = value.constructor;\n\t\t\t\tvalues.push(value[_model.primaryKey]);\n\t\t\t}else{\n\t\t\t\tvalues.push(value);\n\t\t\t}\n\t\t}\n\t\tvalues.push(this[model.primaryKey]);\n\n\n\t\tif (set.length === 0) {\n\t\t\treturn cb(null, this);\n\t\t}\n\n\t\tthis::asynk(function* (resume) {\n\n\t\t\tlet query = `UPDATE ${model.tableName} SET ${set} WHERE ${model.primaryKey} = ?;`;\n\n\t\t\tconsole.log(query, values);\n\n\t\t\tlet [err, rows, fields] = yield model._connection.query(query, values, resume);\n\n\t\t\tif (err) { return cb(err); }\n\n\t\t\tif (rows.affectedRows !== 1) {\n\t\t\t\tthrow new Error(`${rows.affectedRows} rows affected! ${query}`);\n\t\t\t}\n\n\t\t\tcb(null, this);\n\t\t});\n\t}\n}"]}